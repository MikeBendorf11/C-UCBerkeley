
************CURRENT WORK***********

 TASKS
1. Add a new function findobj2 in object.c which searches for an object in a list of objects so that it can find objects when they're inside containers

2. The "take" cmd obtains an object from inside a container whether this container is in the room's or actor's possessions

 DESCRIPTION
1. Assignment sections 4.2 and 4.3 are committed together to show the implementation of the new findobj2 function
2. When adding a new object to a container, the parser's sentence/object is the container obj and sentence/xobject is the contained obj. The parser is only for first level text and list validation. 
3. The findobj2 function will search in the object list after findobject has found a !NULL contents list

 ISSUES
1. Can we cut knife with knife?? potentially yes, not logic but depends on object properties. For now, object.c logic is limited to one object of each type and name per room/game. Room design is clue.  
2. After finishing the 2 tasks, the program was crashing when container was in actors possessions and we tried to remove an obj from it. 

 ANALYSIS
1. Why wasn't the object.c/findobject function arguments initially conceptualized as (actor, name) instead of (object, name)? Because game.h/object struct was not a linked struct before this assignment.

2. Once an object is moved to the containers list it will not be  on the the top level actor's or room's list anymore. Carrying a container doesn't mean that the contained object is part of your possessions. 

3. Regarding issue N2, a program break point showed an issue when object.c/takeobject function was searching the rclist obj. After parser finds an object then the cmd takeobject enters into play.

 ACTIONS TAKEN
- Under object.c created findobj2 and changed takeobject functions 
- Learned how to use the VS debugger with break points. It was pretty useful at uncovering issue n2. Added skip if(rclist!=NULL) to  object.c/takeobject function. 
- Will complete 4.4 and continue with all attributes exercises in the next assignments just so it makes more sense for the structure of the readme file


************SUMMARY****************

MY NOTES

The Dungeon Game is a command line game created by Steve Summit. The basic version of the game allows an imaginary character to move between different rooms.You can type commands such as "north"("n"), "south"("s"), "east"("e") and "west"("w") to make a move and you can also pickup objects and move them around the rooms by using the commands "take" and "drop".

As the C Programming Course progresses, students are required to integrate the files included on the weekly folders and add new features to the game such as directions commands, rooms, actions, objects and descriptions by making use of structures, pointers, functions, input files, etc.

ASSIGNMENT 1

Added a long description field to the object and room structures.
Added "examine" and "look" commands.
"examine" shows the description of the object in the room or the actor's possessions
"look" prints the room descriptions

ASSIGNMENT 2

Added dungeon.dat file that is parsed to create rooms, objects and descriptions structure instances
Implemented a way or those long descriptions to be read from the data file
Added new command directions and room structure possibilities such as "northwest" ("nw"), "southwest" ("sw"), "up" and "down" exits

ASSIGNMENT 3

Integrated the sentence structure which can handle verb and preposition inputs
Added "break" and "cut" commands and updated the dungeon.dat file
Created the plural function which scans for objects' names and replies to the command inputs with grammatically coherent comments

ASSIGNMENT 4

In progress.. See above for details. 

--------------------------------------------
INSTRUCTOR NOTES

Files for "Intermediate C Programming"
UW Experimental College
Winter, 1999
Steve Summit

The top-level directory (the one containing this README file)
contains the source files for the first (week 1) version of the
game.  The week# directories contain additional code we'll be
adding in the weeks to come.

You can either grab the files one at a time, or download the
single file game.tar.Z, which is a compressed archive of all of
them.  If you grab this file, remember to use ftp "binary" mode.
After retrieving it, you can uncompress it and extract the
archive contents with the commands

	uncompress game.tar.Z
	tar xvf game.tar

(These invocations assume you're on a Unix system, although
versions of the commands exist for other operating systems as
well.  If you don't have the uncompress command, try using gunzip.)
